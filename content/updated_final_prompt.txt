You are an experienced instructor for undergraduate Computer Science students for the course Data Structures and Algorithms.
Your task is to generate 15 questions aligning to a Analyze level of the Bloom's taxonomy for the following topics : Dynamic Programming, Graph Theory, Greedy Algorithms.

Please find the explanation of each level of the Bloom's taxonomy:
Remember: retrieve, recall, or recognize relevant knowledge from long-term memory 
Understand:demonstrate comprehension through one or more forms of explanation 
Apply: use information or a skill in a new situation
Analyze: break material into its constituent parts and determine how the parts relate to one another and/or to an overall structure or purpose
Evaluate: make judgments based on criteria and standards
Create: put elements together to form a new coherent or functional whole; reorganize elements into a new pattern or structure


These are the relevant content retrieved from a study material for the course:
weighted, 551 see also directed acyclic graph, directed graph, ow network, undirected graph, tree GRAPH-ISOMORPHISM, 1060 ex. Gray code, 471 pr. gray vertex, 554, 564 greatest common divisor (gcd), 9063907, 910 ex. binary gcd algorithm for, 953 pr. Euclids algorithm for, 9113916, 954 pr. with more than two arguments, 916 ex. recursion theorem for, 911 GREEDY-ACTIVITY-SELECTOR, 424 GREEDY-BIPARTITE-MATCHING, 726 greedy-choice property, 4273428 of activity selection, 4203421 of Huffman codes, 4363437 of ofine caching, 4423445 greedy method, 4173447 for activity selection, 4183425 for coin changing, 446 pr. compared with dynamic programming, 3843385, 393 ex., 421, 4263430 Dijkstras algorithm, 6203626 elements of, 4263431 for the fractional knapsack problem, 429 greedy-choice property in, 4273 method, 3623416 for activity selection, 424 ex. for all-pairs shortest paths, 6483659 for bitonic euclidean traveling-salesperson problem, 407 pr. bottom-up, 368 for breaking a string, 412 pr. compared with greedy method, 3843385, 393 ex., 421, 4263430 for edit distance, 409 pr. elements of, 3823393 for Floyd-Warshall algorithm, 6553659 for inventory planning, 414 pr. for longest common subsequence, 3933399 for longest palindrome subsequence, 407 pr. for longest simple path in a weighted directed acyclic graph, 407 pr. for matrix-chain multiplication, 3733382 and memoization, 3903392 for optimal binary search trees, 4003407 optimal substructure in, 3823387 overlapping subproblems in, 3873390 for printing neatly, 408 pr. reconstructing an optimal solution in, 390 relation to divide-and-conq gorithm, 6203626 elements of, 4263431 for the fractional knapsack problem, 429 greedy-choice property in, 4273428 for Huffman code, 4313439 Kruskals algorithm, 5923594 for maximal bipartite matching, 726 for minimum spanning tree, 5913599 for ofine caching, 4403446 optimal substructure in, 428 Prims algorithm, 5943597 for set cover, 111531119 for task-parallel scheduling, 7593761, 769 ex. for task scheduling, 446 pr. for weighted set cover, 1132 pr. greedy scheduler, 759 GREEDY-SET-COVER, 1117 grid, 697 pr. group, 9163923 cyclic, 932 operator (), 917 Index 1267 growth step, 736 guessing the solution, in the substitution method, 92 Habanero-Java, 750 half 3-CNF satisability, 1099 ex. half-open interval (a; b/ or .a; bc), 1157 Halls theorem, 715 ex. halting, 6 halting problem, 1042 halving l n, 3873390 for printing neatly, 408 pr. reconstructing an optimal solution in, 390 relation to divide-and-conquer, 362 for rod cutting, 3633373 for seam carving, 412 pr. Index 1263 dynamic-programming method, continued for signing free agents, 414 pr. top-down with memoization, 368 for transitive closure, 6593661 for Viterbi algorithm, 411 pr. for the 0-1 knapsack problem, 430 ex. dynamic set, 2493251 see also data structure dynamic table, 4603471 analyzed by accounting method, 463 analyzed by aggregate analysis, 4623463 analyzed by potential method, 4633470 load factor of, 461 dynamic tree, 478 E  c, see expected value e (base of the natural logarithm), 65 edge, 1164 antiparallel, 6733674 attributes of, 552 back, 569 bridge, 582 pr. capacity of, 671 classication in breadth-rst search, 581 predecessor-subgraph property, 611, 637638 prediction, 1004 prediction phase, 1003 preemption, 446 pr., 816 pr. prex of a sequence, 395 of a string (h), 959 prex computation, 784 pr. prex-free code, 432 prex function, 975977 prex-function iteration lemma, 980 preow, 703 preimage of a matrix, 1224 pr. 1280 Index preorder, total, 1160 preorder tree walk, 314 Prims algorithm, 594597 with an adjacency matrix, 598 ex. in approximation algorithm for traveling-salesperson problem, 1110 with integer edge weights, 598 ex. similarity to Dijkstras algorithm, 624 for sparse graphs, 599 pr. primality testing, 942953, 956 Miller-Rabin test, 945953 pseudoprimality testing, 944945 primal linear program, 866 augmented, 870 primary clustering, 303 prime distribution function, 943 prime factorization of inte T-DESCENT-CONSTRAINED, 1032 gradient of a function, 1023 GRAFT, 542 pr. grain size in a parallel algorithm, 783 pr. graph, 116431169 adjacency-list representation of, 5503551 adjacency-matrix representation of, 5513552 and asymptotic notation, 548 attributes of, 548, 552 breadth-rst search of, 5543563 coloring of, 1100 pr. complement of, 1085 component, 576 constraint, 6283630 dense, 549 depth-rst search of, 5633572 dynamic, 523, 817 -dense, 668 pr. hamiltonian, 1056 interval, 425 ex. matching in, 6933697, 7043743 nonhamiltonian, 1056 planar, 584 pr. regular, 716 ex., 740 pr. shortest path in, 558 singly connected, 572 ex. sparse, 549 static, 522 subproblem, 3703371 tour of, 1090 weighted, 551 see also directed acyclic graph, directed graph, ow network, undirected graph, tree GRAPH-ISOMOR ng time of, 29 scaling, 641 pr., 699 pr. streaming, 818 as a technology, 13 verication, 1058 algorithmic recurrence, 77378 ALLOCATE-NODE, 506 all-pairs shortest paths, 605, 6463669 in dynamic graphs, 669 in -dense graphs, 668 pr. Floyd-Warshall algorithm for, 6553659 Johnsons algorithm for, 6623667 by matrix multiplication, 6483655, 6683669 by repeated squaring, 6523653 -balanced, 472 pr. .n/, 533 -strongly convex function, 1041 alphabet, 967, 1052 alternating path, 705 amortized analysis, 4483475 by accounting method, 4533456 by aggregate analysis, 370, 4493453 for breadth-rst search, 558 for depth-rst search, 5663567 for Dijkstras algorithm, 6233624 for disjoint-set data structures, 5253526, 527 ex., 531 ex., 5343540, 541 ex. for dynamic tables, 4603471 for the Knuth-Morris-Pratt algori polynomial-time algorithm, 904, 1042 polynomial-time approximation scheme, 1105 for maximum clique, 1131 pr. for subset sum, 11241130 polynomial-time computability, 1051 polynomial-time decision, 1053 polynomial-time reducibility ( P ), 1062, 1071 ex. polynomial-time solvability, 1050 polynomial-time verication, 10561061 POP, 255, 449 pop from a runtime stack, 202 pr. positional tree, 1174 positive-denite matrix, 1222 positive-semidenite matrix, 1222 post-ofce location problem, 244 pr. postorder tree walk, 314 potential function, 456 for lower bounds, 475 potential method, 456460 for binary counters, 458459 for disjoint-set data structures, 534540, 541 ex. for dynamic tables, 463470 for maintaining a linked list, 799801 for min-heaps, 459 ex. for restructuring red-black trees, 473 pr. for  ay encounter a problem for which you cannot readily nd a published algorithm (many of the exercises and problems in this book, for example). This book will teach you techniques of algorithm design and analysis so that you can develop al- gorithms on your own, show that they give the correct answer, and analyze their ef- ciency. Different chapters address different aspects of algorithmic problem solv- ing. Some chapters address specic problems, such as nding medians and order statistics in Chapter 9, computing minimum spanning trees in Chapter 21, and de- termining a maximum ow in a network in Chapter 24. Other chapters introduce techniques, such as divide-and-conquer in Chapters 2 and 4, dynamic programming in Chapter 14, and amortized analysis in Chapter 16. Hard problems Most of this boo 54 set-covering problem, 11151119 weighted, 1132 pr. set-partition problem, 1098 ex. Index 1285 SHA-256, 291 shared memory, 748 sharks with lasers, 850 Shells sort, 48 shift left (n), 305 right (o), 285 in string matching, 957 shift instruction, 27 short-circuiting operator, 24 SHORTEST-PATH, 1045 shortest paths, 604669 all-pairs, 605, 646669 Bellman-Ford algorithm for, 612616 with bitonic shortest paths, 644 pr. and breadth-rst search, 558561, 605 convergence property of, 611, 634635 and cycles, 607608 and difference constraints, 626632 Dijkstras algorithm for, 620626 in a directed acyclic graph, 616619 distance in (), 558 in -dense graphs, 668 pr. estimate of, 609 Floyd-Warshall algorithm for, 655659, 662 ex. Gabows scaling algorithm for, 641 pr. Johnsons algorithm for, 662667 as a line ability, 107331076 forward edge, 569 forward substitution, 8223823 Fourier transform, see discrete Fourier transform, fast Fourier transform fractional knapsack problem, 429 fractional matching, 741 pr. free tree, 1167, 116931171 frequency count, 802 ex. frequency domain, 877 full binary tree, 1174 relation to optimal code, 433 full node, 502 full rank, 1220 full walk of a tree, 1112 fully parenthesized matrix-chain product, 374 fully polynomial-time approximation scheme, 1105 for subset sum, 112431130 function, 116131163 Ackermanns, 544 -strongly convex, 1041 basis, 841 -smooth, 1041 boolean, 1182 ex. convex, 102531027, 1194 driving, 101 nal-state, 968 hash, see hash function iterated, 68, 74 pr. linear, 30, 853 objective, 626, 852, 854 potential, 456 prex, 9753977 probability distributio ction, 1022, 1024 g., 1026 g. minimum, 227 in binary search trees, 3173318 nding, 2283229 ofine, 541 pr. in red-black trees, 334 MINIMUM, 173, 228, 250 minimum-cost circulation, 875 pr. minimum-cost ow, 8623864 minimum-cost multicommodity ow, 866 ex. minimum-cost spanning tree, see minimum spanning tree minimum cut, 682 global, 701 pr. minimum degree, of a B-tree, 502 minimum mean-weight cycle, 642 pr. minimum path cover, 698 pr. minimum spanning tree, 5853603 in approximation algorithm for traveling-salesperson problem, 1110 Bor uvkas algorithm for, 603 on dynamic graphs, 599 ex. Index 1275 minimum spanning tree, continued generic method for, 5863591 Kruskals algorithm for, 5923594 Prims algorithm for, 5943597 second-best, 599 pr. minimum-weight spanning tree, see minimum spanning tree mi pseudocode, 24 antiparallel edges, 6733674 antisymmetric relation, 1160 approximation by least squares, 8413845 of summation by integrals, 1150 approximation algorithm, 110331136 for bin packing, 1131 pr. for MAX-CNF satisability, 1124 ex. for maximum clique, 1131 pr. for maximum matching, 1132 pr. for maximum spanning tree, 1134 pr. for maximum-weight cut, 1124 ex. for MAX-3-CNF satisability, 112031121 for parallel machine scheduling, 1133 pr. randomized, 1120 for set cover, 111531119 for subset sum, 112431130 for traveling-salesperson problem, 110931115 for vertex cover, 110631109, 112131124 for weighted set cover, 1132 pr. for 0-1 knapsack problem, 1134 pr. approximation error, 842 approximation ratio, 1104, 1120 approximation scheme, 1105 APPROX-MIN-WEIGHT-VC, 1123 APPROX-SUBSET-SUM, 1 ur is hu; w; v; x; ui, with cost 7. The formal language for the corresponding decision problem is TSP D fhG; c; ki W G D .V; E/ is a complete graph; c is a function from V  V ! N; k 2 N, and G has a traveling-salesperson tour with cost at most kg : The following theorem shows that a fast algorithm for the traveling-salesperson problem is unlikely to exist. Theorem 34.14 The traveling-salesperson problem is NP-complete. Proof We rst show that TSP 2 NP. Given an instance of the problem, the certicate is the sequence of n vertices in the tour. The verication algorithm checks that this sequence contains each vertex exactly once, sums up the edge costs, and checks that the sum is at most k. This process can certainly be done in polynomial time. To prove that TSP is NP-hard, we show that HAM-CYC  with a Fibonacci heap, yielding a running time of O.V 2 lg V C VE/. If the graph contains negative-weight edges, Dijkstra9s algorithm doesn9t work, but you can run the slower Bellman-Ford algorithm once from each vertex. The resulting running time is O.V 2 E/, which on a dense graph is O.V 4 /. This chapter shows how to guarantee a much better asymptotic running time. It also investigates the relation of the all-pairs shortest-paths problem to matrix multiplication. Unlike the single-source algorithms, which assume an adjacency-list representa- tion of the graph, most of the algorithms in this chapter represent the graph by an adjacency matrix. (Johnson9s algorithm for sparse graphs, in Section 23.3, uses adjacency lists.) For convenience, we assume that the vertices are numbered 1; 2; :  ear programming, 1098 ex. of the longest-simple-cycle problem, 1098 ex. proving, of a language, 107231073 reduction strategies for, 109531098 of scheduling with prots and deadlines, 1102 pr. of the set-covering problem, 1119 ex. of the set-partition problem, 1098 ex. of the subgraph-isomorphism problem, 1098 ex. of the subset-sum problem, 109231095 of the 3-CNF-satisability problem, 107631079 of the traveling-salesperson problem, 109031092 of the vertex-cover problem, 108431085 of 0-1 integer programming, 1098 ex. NP-hard, 1063 n-set, 1156 n-tuple, 1157 null event, 1185 null tree, 1173 null vector, 1221 number-eld sieve, 956 numerical stability, 819, 821 n-vector, 1215 o-notation, 60 O-notation, 50, 54355 O 0 -notation, 73 pr. e O-notation, 73 pr. object, 23 objective function, 626, 852, 8  atras cu. Dynamic optimality4 almost. SIAM Journal on Computing, 37(1):2403251, 2007. [110] Camil Demetrescu, David Eppstein, Zvi Galik, and Giuseppe F. Italiano. Dynamic graph algorithms. In Mikhail J. Attalah and Marina Blanton, editors, Algorithms and Theory of Computation Handbook, chapter 9, pages 9-139-28. Chapman & Hall/CRC, second edition, 2009. Bibliography 1233 [111] Camil Demetrescu and Giuseppe F. Italiano. Fully dynamic all pairs shortest paths with real edge weights. Journal of Computer and System Sciences, 72(5):8133837, 2006. [112] Eric V. Denardo and Bennett L. Fox. Shortest-route methods: 1. Reaching, pruning, and buckets. Operations Research, 27(1):1613186, 1979. [113] Martin Dietzfelbinger, Torben Hagerup, Jyrki Katajainen, and Martti Penttonen. A reliable randomized a rty.) Recall that optimal substructure is one of the key indicators that dynamic programming (Chap- ter 14) and the greedy method (Chapter 15) might apply. Dijkstra9s algorithm, which we shall see in Section 22.3, is a greedy algorithm, and the Floyd-Warshall algorithm, which nds a shortest path between every pair of vertices (see Sec- 606 Chapter 22 Single-Source Shortest Paths tion 23.2), is a dynamic-programming algorithm. The following lemma states the optimal-substructure property of shortest paths more precisely. Lemma 22.1 (Subpaths of shortest paths are shortest paths) Given a weighted, directed graph G D .V; E/ with weight function w W E ! R, let p D hv 0 ; v 1 ; : : : ; v k i be a shortest path from vertex v 0 to vertex v k and, for any i and j such that 0  i  j  k, let p ij D hv  closure, 659661 and boolean matrix multiplication, 838 ex. of dynamic graphs, 667 pr., 669 TRANSITIVE-CLOSURE, 660 transitive relation, 1159 transitivity of asymptotic notation, 61 TRANSPLANT, 324, 346 transpose conjugate, 838 ex. of a directed graph, 553 ex. of a matrix, 1214 transpose symmetry of asymptotic notation, 62 traveling-salesperson problem approximation algorithm for, 11091115 bitonic euclidean, 407 pr. bottleneck, 1115 ex. NP-completeness of, 10901092 with the triangle inequality, 11101113 without the triangle inequality, 11131114 traversal of a tree, 314, 320 ex., 1112 treap, 358 tree, 11691176 AA-trees, 358 AVL, 357 pr., 358 binary, see binary tree bisection of, 1177 pr. breadth-rst, 555, 561 B-trees, 497519 decision, 206207, 219 pr. depth-rst, 564 diameter of, 563 ex. dyna ST-PATH .; i; ij / 6 print j Chapter outline Section 23.1 presents a dynamic-programming algorithm based on matrix mul- tiplication to solve the all-pairs shortest-paths problem. The technique of <re- peated squaring= yields a running time of .V 3 lg V /. Section 23.2 gives another dynamic-programming algorithm, the Floyd-Warshall algorithm, which runs in .V 3 / time. Section 23.2 also covers the problem of nding the transitive closure of a directed graph, which is related to the all-pairs shortest-paths problem. Finally, Section 23.3 presents Johnson9s algorithm, which solves the all-pairs shortest-paths problem in O.V 2 lg V C VE/ time and is a good choice for large, sparse graphs. Before proceeding, we need to establish some conventions for adjacency-matrix representations. First, we ge  multiplication, 376 of ofine caching, 4413442 of rod cutting, 365 of shortest paths, 6053606, 649, 6553656 of unweighted shortest paths, 385 of the 0-1 knapsack problem, 429 optimal vertex cover, 1106 optimization problem, 362, 1045, 1049 approximation algorithms for, 110431136 and decision problems, 1045 OR function (_), 659, 1065 order of a group, 922 of growth, 32 linear, 1160 partial, 1160 total, 1160 ordered pair, 1156 ordered tree, 1173 order statistics, 160, 2273247 dynamic, 4803486 order-statistic tree, 4803486 ord function, 987 OR gate, 1065 or, in pseudocode, 24 orthonormal, 849 OS-KEY-RANK, 485 ex. OS-RANK, 483 OS-SELECT, 482 outcome, 1185 out-degree, 1165 outer product, 1219 output of an algorithm, 5 of a combinational circuit, 1066 of a logic gate, 1065 overdetermined system  on Foundations of Computer Science, pages 8321, 1978. [203] Dan Guseld and Robert W. Irving. The Stable Marriage Problem: Structure and Algo- rithms. The MIT Press, 1989. [204] Gregory Gutin and Abraham P. Punnen, editors. The Traveling Salesman Problem and Its Variations. Kluwer Academic Publishers, 2002. [205] Torben Hagerup. Improved shortest paths on the word RAM. In Procedings of 27th In- ternational Colloquium on Automata, Languages and Programming, ICALP 2000, volume 1853 of Lecture Notes in Computer Science, pages 61372. Springer, 2000. [206] H. Halberstam and R. E. Ingram, editors. The Mathematical Papers of Sir William Rowan Hamilton, volume III (Algebra). Cambridge University Press, 1967. [207] Yijie Han. Improved fast integer sorting in linear space. Information and Computation e shortest spanning subtree of a graph and the traveling salesman problem. Proceedings of the American Mathematical Society, 7(1):48350, 1956. [273] Harold W. Kuhn. The Hungarian method for the assignment problem. Naval Research Logistics Quarterly, 2:83397, 1955. [274] William Kuszmaul and Charles E. Leiserson. Floors and ceilings in divide-and-conquer recurrences. In Proceedings of the 3rd SIAM Symposium on Simplicity in Algorithms, pages 1333141, 2021. [275] Leslie Lamport. How to make a multiprocessor computer that correctly executes multipro- cess programs. IEEE Transactions on Computers, C-28(9):6903691, 1979. [276] Eugene L. Lawler. Combinatorial Optimization: Networks and Matroids. Holt, Rinehart, and Winston, 1976. [277] Eugene L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, and D D. Ullman. Data Structures and Algorithms. Addison-Wesley, 1983. [7] Ravindra K. Ahuja, Thomas L. Magnanti, and James B. Orlin. Network Flows: Theory, Algorithms, and Applications. Prentice Hall, 1993. [8] Ravindra K. Ahuja, Kurt Mehlhorn, James B. Orlin, and Robert E. Tarjan. Faster algorithms for the shortest path problem. Journal of the ACM, 37(2):2133223, 1990. [9] Ravindra K. Ahuja and James B. Orlin. A fast and simple algorithm for the maximum ow problem. Operations Research, 37(5):7483759, 1989. [10] Ravindra K. Ahuja, James B. Orlin, and Robert E. Tarjan. Improved time bounds for the maximum ow problem. SIAM Journal on Computing, 18(5):9393954, 1989. [11] Mikl os Ajtai, Nimrod Megiddo, and Orli Waarts. Improved algorithms and analysis for secretary problems and generalizations. SIA , volume 10 of CRM Proceedings and Lecture Notes. American Mathematical Society, 1997. [267] Donald E. Knuth, James H. Morris, Jr., and Vaughan R. Pratt. Fast pattern matching in strings. SIAM Journal on Computing, 6(2):3233350, 1977. [268] Mykel J. Kochenderfer and Tim A. Wheeler. Algorithms for Optimization. The MIT Press, 2019. [269] J. Koml os. Linear verication for spanning trees. Combinatorica, 5(1):57365, 1985. [270] Dexter C. Kozen. The Design and Analysis of Algorithms. Springer, 1992. Bibliography 1241 [271] David W. Krumme, George Cybenko, and K. N. Venkataraman. Gossiping in minimal time. SIAM Journal on Computing, 21(1):1113139, 1992. [272] Joseph B. Kruskal, Jr. On the shortest spanning subtree of a graph and the traveling salesman problem. Proceedings of the American Mathema

Based on the above information, generate 15 questions for the Data Structures and Algorithms course aligning to the Analyze level of the Bloom's taxonomy level.
Ensure that the questions match the standard of a Computer Science examination for the Data Structures and Algorithms for undergraduate student. The questions should
also be only from the content in the retrieved context. 